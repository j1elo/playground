Sistemas Operativos 2, practica 2

Juan Navarro Moreno
Antonio Gonzalez Huete
Grupo A15
Fichero de entrega: p02a15.tgz


Cambios globales respecto a la practica 1
-----------------------------------------
- Makefile actualizado para incluir la compilacion de la herramienta SAPT.
- AÃ±adidos bloques de documentacion en formato Javadoc, y fichero de generacion "Doxyfile"; con "make doc" (requiere tener instalado Doxygen) se genera en la carpeta /doc/ la documentacion en formato HTML.
- Renombrados ficheros relacionados con rserver: ahora el servidor esta en dserver.c y el modulo de atencion de peticiones en dserver-petic.c.
- Salida de mensajes detallados por stderr, para poder activarlos (o no) con el argumento -v.


Cambios del servidor (dserver.c)
--------------------------------
- Mensaje de ayuda si los argumentos no son correctos.
- Nuevo parametro -v en la linea de comandos, para activar la salida de mensajes de error o de estado.
- Se muestran correctamente el numero de conexiones libres y el numero de los hilos en el momento de crearlos / terminarlos.


Cambios de la atencion a peticiones (rserver.c ==> dserver-petic.c)
-------------------------------------------------------------------
- Arreglados los fallos de la practica 1, para partir de una version que pasase correctamente todas las pruebas por defecto de SAPT dadas en la practica 1.
- Desconecta por timeout de los clientes que han conectado pero no han abierto un fichero.
- Ejecuta pthread_testcancel() al principio del bucle principal, para saber si el hilo ha recibido una peticion de terminacion.
- En la funcion de atencion a peticiones, se han cambiado los codigos de retorno de -1 a 0, para que el servidor no termine porque tenga problemas con un solo cliente.
- El nombre del fichero abierto con r_open se guarda en una variable propia para evitar perderlo. Antes se perdia si se ejecutaba un comando incorrecto tras un r_open.
- Corregido un error por el que el comando "r_write", sin mas, tiraba al servidor.
- Ahora se acepta el comando r_close sin tener un fichero abierto en el servidor. Se limita a cerrar la conexion.


DETALLES SOBRE LA IMPLEMENTACION
- El servidor que recibe un d_register actualiza sus tablas de servidores y se las envia a TODOS los demas servidores (incluido a si mismo) mediante un memcpy().
- Esquema basico utilizado para los hilos:

typedef struct {
	Semaphore *semArgs;
	//Mas argumentos.
} argumentos_t;

fncHiloPadre {
	Semaphore semArgs;
	pthread_t hilos[MAX];
	pthread_attr_t atribs;
	argumentos_t args;

	pthread_attr_init(&atribs);
	pthread_attr_setdetachstate(&atribs, PTHREAD_CREATE_JOINABLE);

	args.semArgs = &semArgs;
	//Asignacion de argumentos comunes a todos los hilos.

	semaphore_init(&semArgs, 1);
	for (i=0; i<MAX; i++) {
		semaphore_down(&semArgs);
		//Asignacion de argumentos diferentes para cada hilo.
		pthread_create(hilos+i, &atribs, fncHiloHijo, (void *)&args);
	}

	/* Los hilos necesitan acceder a la variable semArgs; si el hilo padre termina antes que
	 * los hijos, semArgs sera destruida y ocurrira un fallo de segmentacion.
	 * Por eso el hilo padre espera a que los hijos terminen. */
	for (i=0; i<MAX; i++)
		pthread_join(hilos[i], NULL);

	pthread_exit(NULL);
}

void *fncHiloHijo(void *argumentos) {
	argumentos_t args;

	memcpy(&args, argumentos, sizeof(argumentos_t));
	semaphore_up(args.semArgs);
	//Trabajar con los argumentos.

	pthread_exit(NULL);
}
